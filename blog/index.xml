<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog Extended</title>
    <link>http://yuyasvx.github.io/blog/index.xml</link>
    <description>Recent content on Blog Extended</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 06 Mar 2017 00:17:31 +0900</lastBuildDate>
    <atom:link href="http://yuyasvx.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Hugoでお手軽ブログ構築</title>
      <link>http://yuyasvx.github.io/blog/post/2017/03/make-blog-with-hugo/</link>
      <pubDate>Mon, 06 Mar 2017 00:17:31 +0900</pubDate>
      
      <guid>http://yuyasvx.github.io/blog/post/2017/03/make-blog-with-hugo/</guid>
      <description>&lt;p&gt;私もついに重い腰を上げてブログ環境を構築したので、いろいろメモします。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;静的サイトジェネレータとは&#34;&gt;静的サイトジェネレータとは？&lt;/h2&gt;

&lt;p&gt;「ブログ」というと、Wordpress などの Web 上のツールでブログを展開するのがお決まりの方法だと思いますが、今「&lt;strong&gt;静的サイトジェネレータ (Static Site Generator, SSG)&lt;/strong&gt;」というツールが新たに広まりつつあります。&lt;/p&gt;

&lt;p&gt;SSG は、テンプレートさえ設定しておけば、タイトルや本文などの内容だけを適当に書いて、あとは生成コマンドを打つだけで完成版の HTML が一瞬にして出来上がるツールです。テンプレートは非常に柔軟に設計できるため、ブログ構築にも適用できるというわけ。しかも、公開するファイルは HTML・CSS・JS などの&lt;strong&gt;静的ファイルだけ&lt;/strong&gt;なので、PHP や MySQL などが動かないサーバーでも公開でき、しかも&lt;strong&gt;不正ログイン対策などを行う必要がない&lt;/strong&gt;という怠惰な僕にはぴったりなツールなのです。&lt;/p&gt;

&lt;p&gt;従来のブログツールとは違い、SSG 自体はローカルで使用するため、&lt;strong&gt;ローカルで公開用のファイルを生成してから Web サーバーにアップロードする&lt;/strong&gt;という流れで記事更新を行います。&lt;/p&gt;

&lt;p&gt;SSG には幾つか種類があり、メジャーなものでも&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jekyll&lt;/li&gt;
&lt;li&gt;Middleman&lt;/li&gt;
&lt;li&gt;Octopress&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などなどいろいろなものが乱立していますが、記事数が多くなると、HTML の生成に何秒もかかってしまい重くなる等の欠点を抱えています。しかし Hugo は記事数が多くなっても HTML の生成が&lt;a href=&#34;http://re-dzine.net/2015/01/hugo/&#34; target=&#34;_blank&#34;&gt;ミリ秒単位&lt;/a&gt;で済むという大きな利点があります。私もブログ構築するにあたり何のツールを使おうか結構迷いましたが、Hugo を使うことにしました。&lt;/p&gt;

&lt;h2 id=&#34;必要なもの&#34;&gt;必要なもの&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Homebrew&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;※Windowsの場合は&lt;a href=&#34;http://gohugo.io/&#34; target=&#34;_blank&#34;&gt;公式サイト&lt;/a&gt;からファイルをダウンロードし、.exe ファイルを適切な場所に配置してから path を通すなどの作業が必要になります。このブログでは、Mac で Hugo を使うことを前提とします。&lt;/p&gt;

&lt;p&gt;特に明記していませんが、CUI ベースなので基本 Terminal とにらめっこです。&lt;/p&gt;

&lt;h2 id=&#34;インストール&#34;&gt;インストール&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ brew install hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;たったこれだけで Hugo 自体のインストールはおしまいです。&lt;code&gt;hugo version&lt;/code&gt;を打った後正しくバージョンが表示されたら成功です。&lt;/p&gt;

&lt;h2 id=&#34;web-ページを生成するまでの流れ&#34;&gt;Web ページを生成するまでの流れ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;サイトを定義する&lt;/li&gt;
&lt;li&gt;テーマのダウンロード&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Config.toml&amp;rdquo; ファイルを編集し、URL・テーマ・ブログの名前・作者などのプロパティを設定&lt;/li&gt;
&lt;li&gt;記事ファイル（Markdown によるテキスト）を新規作成し、そこに記事を書く&lt;/li&gt;
&lt;li&gt;完成版の HTML を生成する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hugo でできるのはここまでで、記事の公開方法は公開先のサービスによって違います。GitHub Pagesであれば&lt;code&gt;git push&lt;/code&gt;だし、普通のレンタルサーバーであればまた違う方法だし。このブログでは、記事の生成までを簡単にまとめておきます。&lt;/p&gt;

&lt;h3 id=&#34;サイトの定義&#34;&gt;サイトの定義&lt;/h3&gt;

&lt;p&gt;Hugo を始めるには、まずサイトの設定や内容を納めるためのプロジェクトディレクトリを作成する必要があります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /path/to/ディレクトリ
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でプロジェクトを生成する場所を決めます。そうしたら、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new site サイト名
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で生成します。うまくいくと、以下のようなメッセージが現れます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Congratulations! Your new Hugo site is created in /path/to/ディレクトリ/サイト名.

Just a few more steps and you&#39;re ready to go:

1. Download a theme into the same-named folder.
   Choose a theme from https://themes.gohugo.io/, or
   create your own with the &amp;quot;hugo new theme &amp;lt;THEMENAME&amp;gt;&amp;quot; command.
2. Perhaps you want to add some content. You can add single files
   with &amp;quot;hugo new &amp;lt;SECTIONNAME&amp;gt;/&amp;lt;FILENAME&amp;gt;.&amp;lt;FORMAT&amp;gt;&amp;quot;.
3. Start the built-in live server via &amp;quot;hugo server&amp;quot;.

Visit https://gohugo.io/ for quickstart guide and full documentation.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;生成されるファイルやディレクトリは以下の通りです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;archetypes：記事ファイルの雛形&lt;/li&gt;
&lt;li&gt;config.toml：サイトの設定&lt;/li&gt;
&lt;li&gt;content：記事ファイルの保存場所&lt;/li&gt;
&lt;li&gt;data：実はわからない&lt;/li&gt;
&lt;li&gt;layouts：レイアウトの設定（テーマよりも優先される）&lt;/li&gt;
&lt;li&gt;static：画像や CSS などの静的ファイル&lt;/li&gt;
&lt;li&gt;themes：テーマ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ディレクトリは全部空です。それぞれのディレクトリやファイルがどんな役割を担っているかはひとまず置いといて、次はテーマを決めたいと思います。&lt;/p&gt;

&lt;h3 id=&#34;テーマの導入&#34;&gt;テーマの導入&lt;/h3&gt;

&lt;p&gt;Hugo では、インストール直後はテーマは未定義であり、その状態のままで HTML の生成を行うことはできません。なのでテーマを決めましょう。&lt;a href=&#34;http://themes.gohugo.io&#34; target=&#34;_blank&#34;&gt;ここ&lt;/a&gt;等から適用したいテーマを見つけて、&lt;code&gt;git clone&lt;/code&gt;してください。clone 先は&lt;code&gt;themes&lt;/code&gt;ディレクトリです。&lt;/p&gt;

&lt;h3 id=&#34;config-toml-の設定&#34;&gt;config.toml の設定&lt;/h3&gt;

&lt;p&gt;テーマを導入したら、config.toml をテキストエディタで開き、URL、ブログ名、作者などの基本的な情報を設定していきます。&lt;strong&gt;設定できる内容はテーマによって違う&lt;/strong&gt;ので、テーマの&lt;strong&gt;配布元の説明に従って設定を行う&lt;/strong&gt;必要がありますが、全てに共通する一番重要なものだけここで説明しておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;baseurl = &amp;quot;http://yuyasvx.github.io/blog/&amp;quot;
languageCode = &amp;quot;ja&amp;quot;
title = &amp;quot;Blog Extended&amp;quot;
theme = &amp;quot;plain&amp;quot;
HasCJKLanguage = true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上の 5 つです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;baseurl&lt;/code&gt;には公開先の URL を設定してください。テーマの中で指定されている CSS 等のリンクなどは、この設定に基づいて決めたりします。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;languageCode&lt;/code&gt; は日本語なので&lt;code&gt;ja&lt;/code&gt;とします。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;title&lt;/code&gt;はブログ名。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;theme&lt;/code&gt;には適用したいテーマ名を入力します。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HasCJKLanguage&lt;/code&gt;は&lt;code&gt;true&lt;/code&gt;にしておかないと日本語の記事を投稿する際に文字数カウントがうまく働きません。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;記事ファイルの生成&#34;&gt;記事ファイルの生成&lt;/h3&gt;

&lt;p&gt;記事ファイルはテンプレートにどんな内容を流し込むか決めるものです。事前に&lt;code&gt;ls&lt;/code&gt;コマンドを打った時&lt;code&gt;config.toml&lt;/code&gt;が存在することを確認したら、こんな感じのコマンドを打ちます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new post/2017/01/HelloWorld.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;すると、&lt;code&gt;content&lt;/code&gt;ディレクトリ内に&lt;code&gt;post&lt;/code&gt;, &lt;code&gt;2017&lt;/code&gt;, &lt;code&gt;01&lt;/code&gt;とディレクトリが生成されて“HelloWorld.md”という Markdown ファイルが出来上がったかと思います。&lt;/p&gt;

&lt;p&gt;この時、“post”に相当する部分を「セクション」と呼びます。Hugo ではセクションごとに記事を分類することができます。カテゴリやタグでも分類できますが、それらとは違い、複数のセクションを記事に設定することはできません。&lt;/p&gt;

&lt;p&gt;また、上記の例のように記事ファイルを生成する際に年や月別でフォルダ分けを&lt;strong&gt;しなくても&lt;/strong&gt;、Web ページの生成時に好みのディレクトリ構成に変えたりすることができます。詳しくは別エントリで説明する予定です。&lt;/p&gt;

&lt;p&gt;まあ変なことは気にせず、とりあえず“HelloWorld.md”をテキストエディタで編集してみましょう。&lt;/p&gt;

&lt;h3 id=&#34;記事の編集&#34;&gt;記事の編集&lt;/h3&gt;

&lt;p&gt;テーマによって違いがありますが、以下のような内容になっていると思います。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
categories = [&amp;quot;hoge&amp;quot;]
title = &amp;quot;&amp;quot;
date = &amp;quot;2017-03-06T00:17:31+09:00&amp;quot;
tags = [&amp;quot;hoge&amp;quot;,&amp;quot;hoge&amp;quot;,&amp;quot;hoge&amp;quot;]
draft = false
+++


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;“+++”で括られた部分は &lt;strong&gt;Front Matter&lt;/strong&gt; と呼ばれ、記事のメタデータを表しています。見ればなんとなく察しがつくと思います。Front Matter で定義できるものはテーマによって違います。アイキャッチ用の画像を設定できるテーマもあればそうでないものもあります。Hugo において、&lt;strong&gt;テーマはいろんな設定を司っているのです&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;複数の値を設定できるものは、&lt;code&gt;[&amp;quot;hoge&amp;quot;,&amp;quot;hoge&amp;quot;,&amp;quot;hoge&amp;quot;]&lt;/code&gt;のように配列チックに記述し、真偽値は&lt;code&gt;true&lt;/code&gt; &lt;code&gt;false&lt;/code&gt;で設定します。日付は自動で用意してくれます。&lt;/p&gt;

&lt;p&gt;Front Matter を決めたら、その下に本文を書きます。&lt;/p&gt;

&lt;h4 id=&#34;slug-について&#34;&gt;Slug について&lt;/h4&gt;

&lt;p&gt;ここで 1 つ重要ポイント。このブログ記事の URL の &lt;code&gt;make-blog-with-hugo&lt;/code&gt; にあたる部分を &lt;strong&gt;slug&lt;/strong&gt; と言います。Hugo では、Front Matter に &lt;code&gt;slug&lt;/code&gt; 属性が無ければ、&lt;strong&gt;ファイル名がそのまま slug として設定&lt;/strong&gt;されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
slug = &amp;quot;this-is-slug&amp;quot;
+++
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ファイル名は日本語でも問題ありませんが、&lt;strong&gt;slug を日本語で設定することはお勧めできません&lt;/strong&gt;（パーセントエンコーディングされて大変なことになります）。ファイル名と slug は別々に設定する方が都合が良いのです。そんな時は、Archetype を改変することで、&lt;code&gt;hugo new&lt;/code&gt;で記事生成した時、常に Front Matter に &lt;code&gt;slug&lt;/code&gt; 属性を付ける様にする事ができます。これも詳しいことは別エントリで記述したいと思います。&lt;/p&gt;

&lt;h3 id=&#34;記事のプレビュー&#34;&gt;記事のプレビュー&lt;/h3&gt;

&lt;p&gt;一通り記事を書き終えたら、Markdown ファイルを保存してから次のコマンドを実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;するとローカルで Web サーバーが立ち上がり、&lt;a href=&#34;http://localhost:1313/&#34;&gt;http://localhost:1313/&lt;/a&gt; にアクセスすることで、実際の記事の見え方を確認することができます。ライブリロード機能が働いているので、.md ファイルを変更したり、テンプレートをいじったりすると、すぐに反映されるようになっています。Ctrl + C でサーバーを閉じることができます。&lt;/p&gt;

&lt;p&gt;ただ、config.toml の変更を行っても反映されないので、その場合はサーバーを立ち上げ直すしかありません。&lt;/p&gt;

&lt;p&gt;ちなみに、このコマンドでは Front Matter の&lt;code&gt;draft&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;（下書き状態）の記事をプレビューすることはできません。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server --buildDrafts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすることで、下書き状態の記事もプレビューすることができます。&lt;/p&gt;

&lt;h3 id=&#34;完成版-html-の生成&#34;&gt;完成版 HTML の生成&lt;/h3&gt;

&lt;p&gt;テーマを決め、記事も書いて、プレビューで出来栄えも確認できたら、完成版のファイルを出力しましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これだけで完成版の HTML が生成されます。&lt;code&gt;public&lt;/code&gt;ディレクトリが新たに作成され、その中に HTML や &lt;code&gt;static&lt;/code&gt;ディレクトリに保存されたファイル等の一式が全て書き出されます。&lt;code&gt;public&lt;/code&gt;ディレクトリの中身をそのまま然るべき Web サーバーに公開して投稿作業はおしまい、ということになります。&lt;/p&gt;

&lt;p&gt;超ざっくり説明するとこんなところでしょうか。とりあえず最低限の要領はつかめたかと思います。テーマによって config.toml で設定できる項目が変わる部分など、割と初見殺し要素がチラチラあったりする Hugo ですが、慣れるといろんな意味で楽になるし、自分がブログを更新する上で、記事にどんな属性をもたせるべきか、どんなディレクトリ構成にする必要があるのかしっかり考えることができるのでオススメです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Markdownサンプル一覧</title>
      <link>http://yuyasvx.github.io/blog/guidelines/markdown-test/</link>
      <pubDate>Sun, 05 Mar 2017 21:10:54 +0900</pubDate>
      
      <guid>http://yuyasvx.github.io/blog/guidelines/markdown-test/</guid>
      <description>

&lt;h2 id=&#34;段落&#34;&gt;段落&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;段落を分けるには、単純に改行するだけではなく、

このように1行空けて改行する必要がありますが、エディタによってはその必要が無いこともあります。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;段落を分けるには、単純に改行するだけではなく、&lt;/p&gt;

&lt;p&gt;このように1行空けて改行する必要がありますが、エディタによってはその必要が無いこともあります。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;リンク&#34;&gt;リンク&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;[テキスト](url)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://www.google.com&#34;&gt;このように表示されます&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;見出し&#34;&gt;見出し&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;# 見出し 1
## 見出し 2
### 見出し 3
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;見出し-2&#34;&gt;見出し 2&lt;/h2&gt;

&lt;h3 id=&#34;見出し-3&#34;&gt;見出し 3&lt;/h3&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;箇条書きリスト&#34;&gt;箇条書きリスト&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;- リスト
	- インデント付き
		- インデント
- リスト
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;リスト

&lt;ul&gt;
&lt;li&gt;インデント付き

&lt;ul&gt;
&lt;li&gt;インデント&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;リスト&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;番号付きリスト&#34;&gt;番号付きリスト&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;1. リスト
	1. インデント付き
	1. 項目
		1. インデント
1. リスト
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;リスト

&lt;ol&gt;
&lt;li&gt;インデント付き&lt;/li&gt;
&lt;li&gt;項目

&lt;ol&gt;
&lt;li&gt;インデント&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;リスト&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;引用&#34;&gt;引用&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;引用の記述です。
&amp;gt;
&amp;gt;改行して、段落を分けるには1行空けます
&amp;gt;
&amp;gt;&amp;gt;引用は重ねることもできます
&amp;gt;&amp;gt;テキストテキスト
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;引用の記述です。&lt;/p&gt;

&lt;p&gt;改行して、段落を分けるには1行空けます&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;引用は重ねることもできます
テキストテキスト&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;コードの記述&#34;&gt;コードの記述&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;    # スペースを行頭に4つ
    class Hoge
      def hoge
        print &#39;hoge&#39;
      end
    end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;# スペースを行頭に4つ
class Hoge
  def hoge
    print &#39;hoge&#39;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もしくは、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;```
# 記号を3つ並べてくくる
class Hoge
  def hoge
    print &#39;hoge&#39;
  end
end
```
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;文字装飾&#34;&gt;文字装飾&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;斜体による強調 *em* _em_
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;斜体による強調 &lt;em&gt;em&lt;/em&gt; &lt;em&gt;em&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;太字による強調 **ボールド** __ボールド__
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;太字による強調 &lt;strong&gt;ボールド&lt;/strong&gt; &lt;strong&gt;ボールド&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[リンク](https://www.google.co.jp/)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://www.google.co.jp/&#34;&gt;リンク&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~~Delete~~
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;del&gt;Delete&lt;/del&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;コードは`code`このようにくくる
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コードは&lt;code&gt;code&lt;/code&gt;このようにくくる&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;水平線&#34;&gt;水平線&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;***

___

---

*    *    *
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;表&#34;&gt;表&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;|header1|header2|header3|
|:--|--:|:--:|
|align left|align right|align center|
|a|b|c|
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;header1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;header2&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;header3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;align left&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;align right&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;align center&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;b&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;c&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>日本語のWebフォントを導入してみた。無料で。</title>
      <link>http://yuyasvx.github.io/blog/post/2017/03/japanese-webfont/</link>
      <pubDate>Sun, 05 Mar 2017 01:34:43 +0900</pubDate>
      
      <guid>http://yuyasvx.github.io/blog/post/2017/03/japanese-webfont/</guid>
      <description>&lt;p&gt;ブログを0から構成し直した記念に日本語Webフォント導入してみた。主要なサービスのうち、日本語のWebフォントを配信しているものというと「FONTPLUS」、「TypeSquare」、「Typekit」、「デコもじ」がパッと思い浮かびました。ですが、デコもじに関してはまさかのサービス終了とのことで残りの3つから何がいいか選ぶことにしました。適当……。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;無料版って探せばあるんだね&#34;&gt;無料版って探せばあるんだね&lt;/h2&gt;

&lt;p&gt;かな・カナ・漢字と文字数のとても多い日本語のWebフォントを、欧文フォントのように全グリフまとめて配信しようとすると、ファイルサイズが異常に膨れ上がってしまいます。このため、たいていの場合Webページ内で必要なグリフを抽出し、そこからサブセットを動的に生成し、Webフォントとして配信するといった高度な処理によって、ファイルサイズの軽量化を行っているサービスが殆どです。&lt;/p&gt;

&lt;p&gt;そんなこともあって無料で導入できないイメージがありましたが、制限つきであれば無料で利用出来るサービスが幾つかあります。&lt;/p&gt;

&lt;h3 id=&#34;typekit&#34;&gt;Typekit&lt;/h3&gt;

&lt;figure&gt;
  &lt;img src=&#34;http://yuyasvx.github.io/blog/blog/images/2017-03-05-japanese-webfont/typekit_page.png&#34; alt=&#34;Typekitページ&#34; /&gt;
&lt;/figure&gt;


&lt;p&gt;アドビが提供しているTypekitですが、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;オープンソースで配信している「源ノ角ゴシック」全ウェイト、「平成角ゴシック」・「平成明朝」・「平成丸ゴシック」の一部ウェイトから選択&lt;/li&gt;
&lt;li&gt;25000PV/月&lt;/li&gt;
&lt;li&gt;1ドメイン&lt;/li&gt;
&lt;li&gt;2個のファミリー&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という条件で無料で利用できます。&lt;/p&gt;

&lt;h3 id=&#34;typesquare&#34;&gt;TypeSquare&lt;/h3&gt;

&lt;figure&gt;
  &lt;img src=&#34;http://yuyasvx.github.io/blog/blog/images/2017-03-05-japanese-webfont/typesquare_page.png&#34; alt=&#34;TypeSquareページ&#34; /&gt;
&lt;/figure&gt;


&lt;p&gt;モリサワが提供しているTypeSquare。こちらに関しては、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;全書体選択可能&lt;/li&gt;
&lt;li&gt;10000PV/月&lt;/li&gt;
&lt;li&gt;1ドメイン&lt;/li&gt;
&lt;li&gt;1書体&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という&lt;a href=&#34;http://typesquare.com/ja/service/plan&#34; target=&#34;_blank&#34;&gt;条件で無料で利用できます&lt;/a&gt;。1ファミリーのみとはいえ、全書体から好きなものを選べるのは素晴らしいと思います。明朝体の選択肢が多いのは個人的に嬉しいですね！&lt;/p&gt;

&lt;p&gt;自分のブログの場合、本文のみ明朝体で、見出しやナビゲーション部分にはゴシック体という割と複雑な状況になっていますが、明朝体はTypeSquare、他はTypekitで源ノ角ゴシックを使うという方法を取ることで、無料のままでいい感じにWebフォント導入できました！複数のWebフォントサービスを併用してもコンフリクトは現在起きていません。&lt;/p&gt;

&lt;p&gt;しばらくはこの状態でやってみようと思います。どうせ月に1万PVなんて達成しないだろうし。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Blog Extendedをどうぞよろしくお願いいたします</title>
      <link>http://yuyasvx.github.io/blog/post/2017/02/say-hello-to-blog-extended/</link>
      <pubDate>Mon, 27 Feb 2017 00:46:04 +0900</pubDate>
      
      <guid>http://yuyasvx.github.io/blog/post/2017/02/say-hello-to-blog-extended/</guid>
      <description>&lt;p&gt;記念すべき1つ目のブログ投稿です。どうもこんにちは、yuyasvxです。&lt;/p&gt;

&lt;p&gt;今度からはここでいろいろなこと、主に技術的なもののメモ帳を中心に、好きなものを好きなように、好きな形式で更新していこうと思います。よろしくお願いいたします！&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;今までしていたこと&#34;&gt;今までしていたこと&lt;/h2&gt;

&lt;p&gt;今まで&lt;a href=&#34;http://yuyasvx.jugem.jp/&#34;&gt;JUGEMというとても懐かしいブログサービス&lt;/a&gt;を使って様々な記事を投稿していましたが、大学生活、そして就活に卒論と忙しさが増し、Twitterで言いたいことだいたい言っちゃうし、なんか記事投稿億劫になってくるし、&lt;strong&gt;そして気づいたら社会人1年生が終わりつつある&lt;/strong&gt;ところまできてしまい、ブログはすっかり投稿していませんでした。&lt;/p&gt;

&lt;p&gt;そんな中、気軽に投稿できるちょうどいいブログサービス「Medium」が数年前始まったので&lt;a href=&#34;http://medium.com/@yuyasvx&#34;&gt;ちょこちょこ更新&lt;/a&gt;していたのですが、やっぱり自分でビジュアルを定義したいし、写真だけの記事を投稿したり、段組なんかしてガッツリ読ませるような記事だって書きたいし、こうなると自分でテーマを作り、ブログを構築する従来のスタイルが一番合うなと思い、Mediumでの更新すら滞ってしまいました。&lt;/p&gt;

&lt;h3 id=&#34;自由にデザインしたい&#34;&gt;自由にデザインしたい&lt;/h3&gt;

&lt;p&gt;しかしながら、今更JUGEMなどのブログプラットフォームで記事更新はしたくないなと思っていました。無料ブログにありがちな邪魔な広告・容量の制限など様々な要因のおかげで、ただでさえ低いデザインの自由度がより一層低くなっているわけですし。&lt;/p&gt;

&lt;p&gt;という事で、昨今流行りというか「当たり前」になっていたWordpressを導入してブログ更新すべく、いろいろ勉強していたのですが…&lt;/p&gt;

&lt;h2 id=&#34;二つの救世主-github-と-hugo&#34;&gt;二つの救世主「GitHub」と「Hugo」&lt;/h2&gt;

&lt;p&gt;僕は、知らなかったのです。GitHubのアカウントを作っていながら、&lt;strong&gt;GitHub Pages&lt;/strong&gt;という機能がある事を。そして、そういった簡易ホスティングサービス向けにブログを展開するツール（Middleman、Octopress、Hugoなどなど）がある事を。これでいいじゃん。という事でGitHub Pagesと爆速で有名なHugoを使ってブログ作っちゃえ、ということで、実は2016年初頭あたりから&lt;strong&gt;構想だけはしていました&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;結局仕事の忙しさにかまけてほぼ全部の趣味がシャットダウン状態だったわけですが、やっぱり文章を書かないと社会人としてヤバイという危機感と、学習したことを書き残す場所が欲しいという理由で、重い腰を上げてついにブログ公開に踏み切りました。&lt;/p&gt;

&lt;p&gt;まだデザインがまともじゃない感はちらほらありますが、ちびちび修正して完成度高めていく予定です。まずはHugoを使ったブログ更新・テーマ作成について投稿していく予定です。今度こそ本当に。&lt;/p&gt;

&lt;p&gt;では。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>