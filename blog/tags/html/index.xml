<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Html on Blog Extended</title>
    <link>http://yuyasvx.github.io/blog/tags/html/index.xml</link>
    <description>Recent content in Html on Blog Extended</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <atom:link href="http://yuyasvx.github.io/blog/tags/html/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>CSS でリンクの下線をもっと自由に</title>
      <link>http://yuyasvx.github.io/blog/post/2017/04/css-underline/</link>
      <pubDate>Wed, 05 Apr 2017 23:35:14 +0900</pubDate>
      
      <guid>http://yuyasvx.github.io/blog/post/2017/04/css-underline/</guid>
      <description>&lt;p&gt;CSS を使って、下線の太さだけを変えたり、文字色と下線の色を別々にしたい時とか割とあるあるな場面だと思うけど、決定打になるやり方ってなかなか見つからないと思っていた。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;よくある方法&#34;&gt;よくある方法&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;text-decoration: none;
border-bottom: 1pt solid #333333;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;しかし・・・&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&#34;http://yuyasvx.github.io/blog/blog/images/2017-04-05-css-underline/ugly-underline.png&#34; alt=&#34;表示例&#34; /&gt;
&lt;/figure&gt;


&lt;ul&gt;
&lt;li&gt;フォントによっては下線が下すぎる&lt;/li&gt;
&lt;li&gt;y とか g のディセンダにかぶさらない → 和文と混ぜたときとか見た目がイケてない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;del&gt;他のサイトのソースを見まくる&lt;/del&gt;調べてみると、次のような方法があることがわかった。&lt;/p&gt;

&lt;h2 id=&#34;before-擬似クラスを下線にする作戦&#34;&gt;before 擬似クラスを下線にする作戦&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=“...”&amp;gt; リンクです &amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな時、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a {
  position: relative;
  display: inline-block;
  text-decoration: none;
}

a:before {
  content: &amp;quot;&amp;quot;;
  position: absolute;
  left: 0;
  right: 0;
  bottom: 4px;
  height: 2px; /*下線の高さ*/
  box-sizing: border-box; /*ボーダーやパディングの分 はみでない*/
  z-index: -2; /*下線は後ろ側に！*/
  
  /* 後はBackgroundを付けるなりご自由に*/
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな指定をしておく&lt;/p&gt;

&lt;style&gt;
    .bordertest {
      position: relative;
      display: inline-block;
      text-decoration: none;
      text-indent: 0;
    }

    .bordertest:before {
      content: &#34;&#34;;
      position: absolute;
      left: 0;
      right: 0;
      bottom: 4px;
      height: 2px; /*下線の高さ*/
      box-sizing: border-box; /*ボーダーやパディングの分 はみでない*/
      z-index: -2; /*下線は後ろ側に！*/
      background-color: #ddd;
      width: 100%;
    }
&lt;/style&gt;


&lt;p&gt;&lt;span class=&#34;bordertest&#34;&gt;どうですか？gyp Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;いいところ：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;デザインの自由度が高い。

&lt;ul&gt;
&lt;li&gt;下線の位置とか見た目を細かく決められる&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;アニメーションとか作れる&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;微妙なところ：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;複数行にまたがった時、見た目が崩れたり下線が残念なことになる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inline-block&lt;/code&gt;の設定が曲者&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;linear-gradient-作戦&#34;&gt;linear gradient 作戦&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=“...”&amp;gt; リンクです &amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな時、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a {
  background: linear-gradient(transparent 40%, #000000 40%)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こう指定する。&lt;/p&gt;

&lt;style&gt;
    .bordertest2 {
      background: linear-gradient(transparent 80%, #CCCCCC 80%)
    }
&lt;/style&gt;


&lt;p&gt;&lt;span class=&#34;bordertest2&#34;&gt;どうですか？gyp Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;いいところ：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;複数行でもちゃんと下線が引かれる。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なんか色々考えているうちにこの方法がいちばん落ち着く気がした。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hugoでお手軽ブログ構築</title>
      <link>http://yuyasvx.github.io/blog/post/2017/03/make-blog-with-hugo/</link>
      <pubDate>Mon, 06 Mar 2017 00:17:31 +0900</pubDate>
      
      <guid>http://yuyasvx.github.io/blog/post/2017/03/make-blog-with-hugo/</guid>
      <description>&lt;p&gt;私もついに重い腰を上げてブログ環境を構築したので、いろいろメモします。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;静的サイトジェネレータとは&#34;&gt;静的サイトジェネレータとは？&lt;/h2&gt;

&lt;p&gt;「ブログ」というと、Wordpress などの Web 上のツールでブログを展開するのがお決まりの方法だと思いますが、今「&lt;strong&gt;静的サイトジェネレータ (Static Site Generator, SSG)&lt;/strong&gt;」というツールが新たに広まりつつあります。&lt;/p&gt;

&lt;p&gt;SSG は、テンプレートさえ設定しておけば、タイトルや本文などの内容だけを適当に書いて、あとは生成コマンドを打つだけで完成版の HTML が一瞬にして出来上がるツールです。テンプレートはある程度柔軟性のある設計であるため、ブログ構築にも適用できるというわけ。静的サイトジェネレータと銘打つだけあって、生成されるファイルは HTML・CSS・JS などの静的ファイルだけなので、&lt;strong&gt;PHP や MySQL などが動かないサーバーでも公開可能&lt;/strong&gt;です。その副産物として、&lt;strong&gt;不正ログインなどのセキュリティ対策を行う必要がない&lt;/strong&gt;という恩恵も付いてきます。怠惰な僕にはまさにピッタリなツールなのです。&lt;/p&gt;

&lt;p&gt;従来のブログツールとは違い、SSG 自体はローカルで使用するため、&lt;strong&gt;ローカルで公開用のファイルを生成してから Web サーバーにアップロードする&lt;/strong&gt;という流れで記事更新を行います。&lt;/p&gt;

&lt;p&gt;SSG には幾つか種類があり、メジャーなものでも&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jekyll&lt;/li&gt;
&lt;li&gt;Middleman&lt;/li&gt;
&lt;li&gt;Octopress&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などなどいろいろなものが乱立していますが、記事数が多くなると、HTML の生成に何秒もかかってしまい重くなる等の欠点を抱えています。しかし Hugo は記事数が多くなっても HTML の生成が&lt;a href=&#34;http://re-dzine.net/2015/01/hugo/&#34; target=&#34;_blank&#34;&gt;ミリ秒単位&lt;/a&gt;で済むという大きな利点があります。私もブログ構築するにあたり何のツールを使おうか結構迷いましたが、Hugo を使うことにしました。&lt;/p&gt;

&lt;h2 id=&#34;前提&#34;&gt;前提&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Mac で使う&lt;/li&gt;
&lt;li&gt;Homebrew が入っている&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;※Windows の場合は&lt;a href=&#34;http://gohugo.io/&#34; target=&#34;_blank&#34;&gt;公式サイト&lt;/a&gt;からファイルをダウンロードし、.exe ファイルを適切な場所に配置してから path を通すなどの作業が必要になります。&lt;/p&gt;

&lt;p&gt;特に明記していませんが、Homebrew ということは CUI ベースなので基本 Terminal とにらめっこです。&lt;/p&gt;

&lt;h2 id=&#34;インストール&#34;&gt;インストール&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ brew install hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;たったこれだけで Hugo 自体のインストールはおしまいです。&lt;code&gt;hugo version&lt;/code&gt;を打った後正しくバージョンが表示されたら成功です。&lt;/p&gt;

&lt;h2 id=&#34;web-ページを生成するまでの流れ&#34;&gt;Web ページを生成するまでの流れ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;サイトを定義する&lt;/li&gt;
&lt;li&gt;テーマのダウンロード&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Config.toml&amp;rdquo; ファイルを編集し、URL・テーマ・ブログの名前・作者などのプロパティを設定&lt;/li&gt;
&lt;li&gt;記事ファイル（Markdown によるテキスト）を新規作成し、そこに記事を書く&lt;/li&gt;
&lt;li&gt;完成版の HTML を生成する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hugo でできるのはここまでで、記事の公開方法は公開先のサービスによって違います。GitHub Pagesであれば&lt;code&gt;git push&lt;/code&gt;だし、普通のレンタルサーバーであればまた違う方法だし。このブログでは、記事の生成までを簡単にまとめておきます。&lt;/p&gt;

&lt;h3 id=&#34;サイトの定義&#34;&gt;サイトの定義&lt;/h3&gt;

&lt;p&gt;Hugo を始めるには、まずサイトの設定や内容を納めるためのプロジェクトディレクトリを作成する必要があります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /path/to/ディレクトリ
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でプロジェクトを生成する場所を決めます。そうしたら、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new site サイト名
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で生成します。うまくいくと、以下のようなメッセージが現れます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Congratulations! Your new Hugo site is created in /path/to/ディレクトリ/サイト名.

Just a few more steps and you&#39;re ready to go:

1. Download a theme into the same-named folder.
   Choose a theme from https://themes.gohugo.io/, or
   create your own with the &amp;quot;hugo new theme &amp;lt;THEMENAME&amp;gt;&amp;quot; command.
2. Perhaps you want to add some content. You can add single files
   with &amp;quot;hugo new &amp;lt;SECTIONNAME&amp;gt;/&amp;lt;FILENAME&amp;gt;.&amp;lt;FORMAT&amp;gt;&amp;quot;.
3. Start the built-in live server via &amp;quot;hugo server&amp;quot;.

Visit https://gohugo.io/ for quickstart guide and full documentation.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;生成されるファイルやディレクトリは以下の通りです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;archetypes：記事ファイルの雛形&lt;/li&gt;
&lt;li&gt;config.toml：サイトの設定&lt;/li&gt;
&lt;li&gt;content：記事ファイルの保存場所&lt;/li&gt;
&lt;li&gt;data：実はわからない&lt;/li&gt;
&lt;li&gt;layouts：レイアウトの設定（テーマよりも優先される）&lt;/li&gt;
&lt;li&gt;static：画像や CSS などの静的ファイル&lt;/li&gt;
&lt;li&gt;themes：テーマ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ディレクトリは全部空です。それぞれのディレクトリやファイルがどんな役割を担っているかはひとまず置いといて、次はテーマを決めたいと思います。&lt;/p&gt;

&lt;h3 id=&#34;テーマの導入&#34;&gt;テーマの導入&lt;/h3&gt;

&lt;p&gt;Hugo では、インストール直後はテーマは未定義であり、その状態のままで HTML の生成を行うことはできません。なのでテーマを決めましょう。&lt;a href=&#34;http://themes.gohugo.io&#34; target=&#34;_blank&#34;&gt;ここ&lt;/a&gt;等から適用したいテーマを見つけて、&lt;code&gt;git clone&lt;/code&gt;してください。clone 先は&lt;code&gt;themes&lt;/code&gt;ディレクトリです。&lt;/p&gt;

&lt;h3 id=&#34;config-toml-の設定&#34;&gt;config.toml の設定&lt;/h3&gt;

&lt;p&gt;テーマを導入したら、config.toml をテキストエディタで開き、URL、ブログ名、作者などの基本的な情報を設定していきます。&lt;strong&gt;設定できる内容はテーマによって違う&lt;/strong&gt;ので、テーマの&lt;strong&gt;配布元の説明に従って設定を行う&lt;/strong&gt;必要がありますが、全てに共通する一番重要なものだけここで説明しておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;baseurl = &amp;quot;http://yuyasvx.github.io/blog/&amp;quot;
languageCode = &amp;quot;ja&amp;quot;
title = &amp;quot;Blog Extended&amp;quot;
theme = &amp;quot;plain&amp;quot;
HasCJKLanguage = true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上の 5 つです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;baseurl&lt;/code&gt;には公開先の URL を設定してください。テーマの中で指定されている CSS 等のリンクなどは、この設定に基づいて決めたりします。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;languageCode&lt;/code&gt; は日本語なので&lt;code&gt;ja&lt;/code&gt;とします。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;title&lt;/code&gt;はブログ名。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;theme&lt;/code&gt;には適用したいテーマ名を入力します。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HasCJKLanguage&lt;/code&gt;は&lt;code&gt;true&lt;/code&gt;にしておかないと日本語の記事を投稿する際に文字数カウントがうまく働きません。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;記事ファイルの生成&#34;&gt;記事ファイルの生成&lt;/h3&gt;

&lt;p&gt;記事ファイルはテンプレートにどんな内容を流し込むか決めるものです。事前に&lt;code&gt;ls&lt;/code&gt;コマンドを打った時&lt;code&gt;config.toml&lt;/code&gt;が存在することを確認したら、こんな感じのコマンドを打ちます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new post/2017/01/HelloWorld.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;すると、&lt;code&gt;content&lt;/code&gt;ディレクトリ内に&lt;code&gt;post&lt;/code&gt;, &lt;code&gt;2017&lt;/code&gt;, &lt;code&gt;01&lt;/code&gt;とディレクトリが生成されて&lt;code&gt;HelloWorld.md&lt;/code&gt;という Markdown ファイルが出来上がったかと思います。&lt;/p&gt;

&lt;p&gt;この時、“post”に相当する部分を「セクション」と呼びます。Hugo ではセクションごとに記事を分類することができます。カテゴリやタグでも分類できますが、それらとは違い、複数のセクションを記事に設定することはできません。&lt;/p&gt;

&lt;p&gt;また、上記の例のように記事ファイルを生成する際に年や月別でフォルダ分けを&lt;strong&gt;しなくても&lt;/strong&gt;、Web ページの生成時に好みのディレクトリ構成に変えたりすることができます。詳しくは別エントリで説明する予定です。&lt;/p&gt;

&lt;p&gt;まあ変なことは気にせず、とりあえず HelloWorld.md をテキストエディタで編集してみましょう。&lt;/p&gt;

&lt;h3 id=&#34;記事の編集&#34;&gt;記事の編集&lt;/h3&gt;

&lt;p&gt;テーマによって違いがありますが、以下のような内容になっていると思います。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
categories = [&amp;quot;hoge&amp;quot;]
title = &amp;quot;&amp;quot;
date = &amp;quot;2017-03-06T00:17:31+09:00&amp;quot;
tags = [&amp;quot;hoge&amp;quot;,&amp;quot;hoge&amp;quot;,&amp;quot;hoge&amp;quot;]
draft = false
+++


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;“+++”で括られた部分は &lt;strong&gt;Front Matter&lt;/strong&gt; と呼ばれ、記事のメタデータを表しています。見ればなんとなく察しがつくと思います。Front Matter で定義できるものはテーマによって違います。アイキャッチ用の画像を設定できるテーマもあればそうでないものもあります。Hugo において、&lt;strong&gt;テーマはいろんな設定を司っているのです&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;複数の値を設定できるものは、&lt;code&gt;[&amp;quot;hoge&amp;quot;,&amp;quot;hoge&amp;quot;,&amp;quot;hoge&amp;quot;]&lt;/code&gt;のように配列チックに記述し、真偽値は&lt;code&gt;true&lt;/code&gt;や&lt;code&gt;false&lt;/code&gt;で設定します。日付は自動で用意してくれます。&lt;/p&gt;

&lt;p&gt;Front Matter を決めたら、その下に本文を書きます。&lt;/p&gt;

&lt;h4 id=&#34;slug-について&#34;&gt;Slug について&lt;/h4&gt;

&lt;p&gt;ここで 1 つ重要ポイント。このブログ記事の URL の&lt;code&gt;make-blog-with-hugo&lt;/code&gt;にあたる部分を &lt;strong&gt;slug&lt;/strong&gt; と言います。Hugo では、Front Matter に &lt;code&gt;slug&lt;/code&gt; 属性が無ければ、&lt;strong&gt;ファイル名がそのまま slug として設定&lt;/strong&gt;されます。Front Matter の部分に、以下のような属性を追加すれば、その記事の URL は&lt;code&gt;http://hogehoge.com/post/yyyy/mm/this-is-slug/&lt;/code&gt;のような形になります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
slug = &amp;quot;this-is-slug&amp;quot;
+++
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ファイル名は日本語でも問題ありませんが、&lt;strong&gt;slug を日本語で設定することはお勧めできません&lt;/strong&gt;（パーセントエンコーディングされて大変なことになります）。ファイル名と slug は別々に設定する方が都合が良いのです。そんな時は、Archetype を改変することで、&lt;code&gt;hugo new&lt;/code&gt;で記事生成した時、常に Front Matter に &lt;code&gt;slug&lt;/code&gt; 属性を付ける様にする事ができます。これも詳しいことは別エントリで記述したいと思います。&lt;/p&gt;

&lt;h3 id=&#34;記事のプレビュー&#34;&gt;記事のプレビュー&lt;/h3&gt;

&lt;p&gt;一通り記事を書き終えたら、Markdown ファイルを保存してから次のコマンドを実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;するとローカルで Web サーバーが立ち上がり、&lt;a href=&#34;http://localhost:1313/&#34;&gt;http://localhost:1313/&lt;/a&gt; にアクセスすることで、実際の記事の見え方を確認することができます。ライブリロード機能が働いているので、.md ファイルを変更したり、テンプレートをいじったりすると、すぐに反映されるようになっています。Ctrl + C でサーバーを閉じることができます。&lt;/p&gt;

&lt;p&gt;ただ、config.toml の変更を行っても反映されないので、その場合はサーバーを立ち上げ直すしかありません。&lt;/p&gt;

&lt;p&gt;ちなみに、このコマンドでは Front Matter の&lt;code&gt;draft&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;（下書き状態）の記事をプレビューすることはできません。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server --buildDrafts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすることで、下書き状態の記事もプレビューすることができます。&lt;/p&gt;

&lt;h3 id=&#34;完成版-html-の生成&#34;&gt;完成版 HTML の生成&lt;/h3&gt;

&lt;p&gt;テーマを決め、記事も書いて、プレビューで出来栄えも確認できたら、完成版のファイルを出力しましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これだけで完成版の HTML が生成されます。&lt;code&gt;public&lt;/code&gt;ディレクトリが新たに作成され、その中に HTML や &lt;code&gt;static&lt;/code&gt;ディレクトリに保存されたファイル等の一式が全て書き出されます。&lt;code&gt;public&lt;/code&gt;ディレクトリの中身をそのまま然るべき Web サーバーに公開して投稿作業はおしまい、ということになります。&lt;/p&gt;

&lt;p&gt;超ざっくり説明するとこんなところでしょうか。とりあえず最低限の要領はつかめたかと思います。テーマによって config.toml で設定できる項目が変わる部分など、割と初見殺し要素がチラチラあったりする Hugo ですが、慣れるといろんな意味で楽になるし、自分がブログを更新する上で、記事にどんな属性をもたせるべきか、どんなディレクトリ構成にする必要があるのかしっかり考えることができるのでオススメです。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>